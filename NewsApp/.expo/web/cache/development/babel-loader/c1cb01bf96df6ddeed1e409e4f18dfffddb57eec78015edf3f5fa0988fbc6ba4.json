{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onPressOut\", \"onPressIn\", \"delayLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"rippleColor\", \"showSelectedOverlay\", \"showSelectedCheck\", \"ellipsizeMode\", \"compact\", \"elevated\", \"maxFontSizeMultiplier\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport { getChipColors } from \"./helpers\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport hasTouchHandler from \"../../utils/hasTouchHandler\";\nimport Icon from \"../Icon\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onPressOut = _ref.onPressOut,\n    onPressIn = _ref.onPressIn,\n    delayLongPress = _ref.delayLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'chip' : _ref$testID,\n    selectedColor = _ref.selectedColor,\n    customRippleColor = _ref.rippleColor,\n    _ref$showSelectedOver = _ref.showSelectedOverlay,\n    showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,\n    _ref$showSelectedChec = _ref.showSelectedCheck,\n    showSelectedCheck = _ref$showSelectedChec === void 0 ? true : _ref$showSelectedChec,\n    ellipsizeMode = _ref.ellipsizeMode,\n    compact = _ref.compact,\n    _ref$elevated = _ref.elevated,\n    elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isV3 = theme.isV3;\n  var _React$useRef = React.useRef(new Animated.Value(isV3 && elevated ? 1 : 0)),\n    elevation = _React$useRef.current;\n  var hasPassedTouchHandler = hasTouchHandler({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut\n  });\n  var isOutlined = mode === 'outlined';\n  var handlePressIn = useLatestCallback(function (e) {\n    var scale = theme.animation.scale;\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  });\n  var handlePressOut = useLatestCallback(function (e) {\n    var scale = theme.animation.scale;\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  });\n  var opacity = isV3 ? 0.38 : 0.26;\n  var defaultBorderRadius = isV3 ? 8 : 16;\n  var iconSize = isV3 ? 18 : 16;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    customBackgroundColor = _ref2.backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;\n  var _getChipColors = getChipColors({\n      isOutlined: isOutlined,\n      theme: theme,\n      selectedColor: selectedColor,\n      showSelectedOverlay: showSelectedOverlay,\n      customBackgroundColor: customBackgroundColor,\n      disabled: disabled,\n      customRippleColor: customRippleColor\n    }),\n    borderColor = _getChipColors.borderColor,\n    textColor = _getChipColors.textColor,\n    iconColor = _getChipColors.iconColor,\n    rippleColor = _getChipColors.rippleColor,\n    selectedBackgroundColor = _getChipColors.selectedBackgroundColor,\n    backgroundColor = _getChipColors.backgroundColor;\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  var elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  var labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected && showSelectedCheck ? 4 * multiplier : 8 * multiplier\n  };\n  var contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  var labelTextStyle = _objectSpread({\n    color: textColor\n  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);\n  return React.createElement(Surface, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest, {\n    testID: `${testID}-container`,\n    theme: theme\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,\n    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,\n    delayLongPress: delayLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID,\n    theme: theme\n  }, React.createElement(View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity: opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected && showSelectedCheck ? React.createElement(View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18,\n    theme: theme\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, children))), onClose ? React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative'\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    width: '100%'\n  }\n});\nexport default Chip;","map":{"version":3,"names":["React","Animated","Platform","StyleSheet","TouchableWithoutFeedback","View","useLatestCallback","getChipColors","useInternalTheme","white","hasTouchHandler","Icon","MaterialCommunityIcon","Surface","TouchableRipple","Text","Chip","_ref","_ref$mode","mode","children","icon","avatar","_ref$selected","selected","_ref$disabled","disabled","accessibilityLabel","_ref$closeIconAccessi","closeIconAccessibilityLabel","onPress","onLongPress","onPressOut","onPressIn","delayLongPress","onClose","closeIcon","textStyle","style","themeOverrides","theme","_ref$testID","testID","selectedColor","customRippleColor","rippleColor","_ref$showSelectedOver","showSelectedOverlay","_ref$showSelectedChec","showSelectedCheck","ellipsizeMode","compact","_ref$elevated","elevated","maxFontSizeMultiplier","rest","_objectWithoutProperties","_excluded","isV3","_React$useRef","useRef","Value","elevation","current","hasPassedTouchHandler","isOutlined","handlePressIn","e","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","opacity","defaultBorderRadius","iconSize","_ref2","flatten","customBackgroundColor","backgroundColor","_ref2$borderRadius","borderRadius","_getChipColors","borderColor","textColor","iconColor","selectedBackgroundColor","accessibilityState","elevationStyle","OS","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","_objectSpread","color","fonts","labelLarge","regular","createElement","_extends","styles","container","md3OutlineContainer","md3FlatContainer","borderless","touchable","undefined","accessibilityRole","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","source","colors","primary","size","name","direction","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["D:\\5th Semester\\Mobile Application Development\\SemesterProject\\NewsApp\\node_modules\\react-native-paper\\src\\components\\Chip\\Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport { getChipColors } from './helpers';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $Omit, EllipsizeProp, ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   * Note: With theme version 3 `selectedColor` doesn't apply to the `icon`.\n   *       If you want specify custom color for the `icon`, render your own `Icon` component.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether to display default check icon on selected chip.\n   * Note: Check will not be shown if `icon` is specified. If specified, `icon` will be shown regardless of `selected`.\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n};\n\n/**\n * Chips are compact elements that can represent inputs, attributes, or actions.\n * They can have an icon or avatar on the left, and a close button icon on the right.\n * They are typically used to:\n * <ul>\n *  <li>Present multiple options </li>\n *  <li>Represent attributes active or chosen </li>\n *  <li>Present filter options </li>\n *  <li>Trigger actions related to primary content </li>\n * </ul>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onPressOut,\n  onPressIn,\n  delayLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme: themeOverrides,\n  testID = 'chip',\n  selectedColor,\n  rippleColor: customRippleColor,\n  showSelectedOverlay = false,\n  showSelectedCheck = true,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  maxFontSizeMultiplier,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressIn?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  });\n\n  const handlePressOut = useLatestCallback((e: GestureResponderEvent) => {\n    const { scale } = theme.animation;\n    onPressOut?.(e);\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  });\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    rippleColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n    customRippleColor,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft:\n      avatar || icon || (selected && showSelectedCheck)\n        ? 4 * multiplier\n        : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={[\n        styles.container,\n        isV3 &&\n          (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n        !theme.isV3 && {\n          elevation: elevationStyle,\n        },\n        {\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor,\n          borderRadius,\n        },\n        style,\n      ]}\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n      testID={`${testID}-container`}\n      theme={theme}\n    >\n      <TouchableRipple\n        borderless\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        delayLongPress={delayLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n        theme={theme}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || (selected && showSelectedCheck) ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                  theme={theme}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n            maxFontSizeMultiplier={maxFontSizeMultiplier}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    width: '100%',\n  },\n});\n\nexport default Chip;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}