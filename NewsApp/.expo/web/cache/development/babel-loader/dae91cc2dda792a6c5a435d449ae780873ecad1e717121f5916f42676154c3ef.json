{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"dark\", \"style\", \"mode\", \"elevated\", \"safeAreaInsets\", \"theme\"],\n  _excluded2 = [\"backgroundColor\", \"elevation\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport AppbarContent from \"./AppbarContent\";\nimport { DEFAULT_APPBAR_HEIGHT, getAppbarBackgroundColor, modeAppbarHeight, renderAppbarContent } from \"./utils\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport Surface from \"../Surface\";\nvar Appbar = function Appbar(_ref) {\n  var children = _ref.children,\n    dark = _ref.dark,\n    style = _ref.style,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'small' : _ref$mode,\n    elevated = _ref.elevated,\n    safeAreaInsets = _ref.safeAreaInsets,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isV3 = theme.isV3;\n  var flattenedStyle = StyleSheet.flatten(style);\n  var _ref2 = flattenedStyle || {},\n    customBackground = _ref2.backgroundColor,\n    _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var backgroundColor = getAppbarBackgroundColor(theme, elevation, customBackground, elevated);\n  var isMode = function isMode(modeToCompare) {\n    return isV3 && mode === modeToCompare;\n  };\n  var isDark = false;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else if (!isV3) {\n    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !color(backgroundColor).isLight() : true;\n  }\n  var isV3CenterAlignedMode = isV3 && isMode('center-aligned');\n  var shouldCenterContent = false;\n  var shouldAddLeftSpacing = false;\n  var shouldAddRightSpacing = false;\n  if (!isV3 && Platform.OS === 'ios' || isV3CenterAlignedMode) {\n    var hasAppbarContent = false;\n    var leftItemsCount = 0;\n    var rightItemsCount = 0;\n    React.Children.forEach(children, function (child) {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < (isV3 ? 3 : 2);\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  var filterAppbarActions = React.useCallback(function () {\n    var isLeading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return React.Children.toArray(children).filter(function (child) {\n      return isLeading ? child.props.isLeading : !child.props.isLeading;\n    });\n  }, [children]);\n  var spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\n  var insets = {\n    paddingBottom: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom,\n    paddingTop: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top,\n    paddingLeft: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left,\n    paddingRight: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right\n  };\n  return React.createElement(Surface, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, styles.appbar, {\n      height: isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT\n    }, insets, restStyle, !theme.isV3 && {\n      elevation: elevation\n    }],\n    elevation: elevation\n  }, rest), shouldAddLeftSpacing ? React.createElement(View, {\n    style: spacingStyle\n  }) : null, (!isV3 || isMode('small') || isMode('center-aligned')) && renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    theme: theme,\n    isV3: isV3,\n    shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent\n  }), (isMode('medium') || isMode('large')) && React.createElement(View, {\n    style: [styles.columnContainer, isMode('center-aligned') && styles.centerAlignedContainer]\n  }, React.createElement(View, {\n    style: styles.controlsRow\n  }, renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: ['Appbar.BackAction'],\n    mode: mode\n  }), renderAppbarContent({\n    children: filterAppbarActions(true),\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: ['Appbar.Action'],\n    mode: mode\n  }), React.createElement(View, {\n    style: styles.rightActionControls\n  }, renderAppbarContent({\n    children: filterAppbarActions(false),\n    isDark: isDark,\n    isV3: isV3,\n    renderExcept: ['Appbar', 'Appbar.BackAction', 'Appbar.Content', 'Appbar.Header'],\n    mode: mode\n  }))), renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: ['Appbar.Content'],\n    mode: mode\n  })), shouldAddRightSpacing ? React.createElement(View, {\n    style: spacingStyle\n  }) : null);\n};\nvar styles = StyleSheet.create({\n  appbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  spacing: {\n    width: 48\n  },\n  v3Spacing: {\n    width: 52\n  },\n  controlsRow: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  rightActionControls: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'flex-end'\n  },\n  columnContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingTop: 8\n  },\n  centerAlignedContainer: {\n    paddingTop: 0\n  }\n});\nexport default Appbar;\nexport { Appbar };","map":{"version":3,"names":["React","Platform","StyleSheet","View","color","AppbarContent","DEFAULT_APPBAR_HEIGHT","getAppbarBackgroundColor","modeAppbarHeight","renderAppbarContent","useInternalTheme","Surface","Appbar","_ref","children","dark","style","_ref$mode","mode","elevated","safeAreaInsets","themeOverrides","theme","rest","_objectWithoutProperties","_excluded","isV3","flattenedStyle","flatten","_ref2","customBackground","backgroundColor","_ref2$elevation","elevation","restStyle","_excluded2","isMode","modeToCompare","isDark","isLight","isV3CenterAlignedMode","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","OS","hasAppbarContent","leftItemsCount","rightItemsCount","Children","forEach","child","isValidElement","type","filterAppbarActions","useCallback","isLeading","arguments","length","undefined","toArray","filter","props","spacingStyle","styles","v3Spacing","spacing","insets","paddingBottom","bottom","paddingTop","top","paddingLeft","left","paddingRight","right","createElement","_extends","appbar","height","columnContainer","centerAlignedContainer","controlsRow","renderOnly","rightActionControls","renderExcept","create","flexDirection","alignItems","paddingHorizontal","width","flex","justifyContent"],"sources":["E:\\Mobile-Application-Development\\NewsApp\\node_modules\\react-native-paper\\src\\components\\Appbar\\Appbar.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Animated,\r\n  Platform,\r\n  StyleProp,\r\n  StyleSheet,\r\n  View,\r\n  ViewStyle,\r\n  ColorValue,\r\n} from 'react-native';\r\n\r\nimport color from 'color';\r\n\r\nimport AppbarContent from './AppbarContent';\r\nimport {\r\n  AppbarModes,\r\n  DEFAULT_APPBAR_HEIGHT,\r\n  getAppbarBackgroundColor,\r\n  modeAppbarHeight,\r\n  renderAppbarContent,\r\n} from './utils';\r\nimport { useInternalTheme } from '../../core/theming';\r\nimport type { MD3Elevation, ThemeProp } from '../../types';\r\nimport Surface from '../Surface';\r\n\r\nexport type Props = Omit<\r\n  Partial<React.ComponentPropsWithRef<typeof View>>,\r\n  'style'\r\n> & {\r\n  /**\r\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\r\n   */\r\n  dark?: boolean;\r\n  /**\r\n   * Content of the `Appbar`.\r\n   */\r\n  children: React.ReactNode;\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   *\r\n   * Mode of the Appbar.\r\n   * - `small` - Appbar with default height (64).\r\n   * - `medium` - Appbar with medium height (112).\r\n   * - `large` - Appbar with large height (152).\r\n   * - `center-aligned` - Appbar with default height and center-aligned title.\r\n   */\r\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   * Whether Appbar background should have the elevation along with primary color pigment.\r\n   */\r\n  elevated?: boolean;\r\n  /**\r\n   * Safe area insets for the Appbar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\r\n   */\r\n  safeAreaInsets?: {\r\n    bottom?: number;\r\n    top?: number;\r\n    left?: number;\r\n    right?: number;\r\n  };\r\n  /**\r\n   * @optional\r\n   */\r\n  theme?: ThemeProp;\r\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n};\r\n\r\n/**\r\n * A component to display action items in a bar. It can be placed at the top or bottom.\r\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\r\n * The bottom bar usually provides access to a drawer and up to four actions.\r\n *\r\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\r\n * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more informations\r\n *\r\n * ## Usage\r\n * ### Top bar\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Appbar } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <Appbar.Header>\r\n *     <Appbar.BackAction onPress={() => {}} />\r\n *     <Appbar.Content title=\"Title\" />\r\n *     <Appbar.Action icon=\"calendar\" onPress={() => {}} />\r\n *     <Appbar.Action icon=\"magnify\" onPress={() => {}} />\r\n *   </Appbar.Header>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n *\r\n * ### Bottom bar\r\n * ```js\r\n * import * as React from 'react';\r\n * import { StyleSheet } from 'react-native';\r\n * import { Appbar, FAB, useTheme } from 'react-native-paper';\r\n * import { useSafeAreaInsets } from 'react-native-safe-area-context';\r\n *\r\n * const BOTTOM_APPBAR_HEIGHT = 80;\r\n * const MEDIUM_FAB_HEIGHT = 56;\r\n *\r\n * const MyComponent = () => {\r\n *   const { bottom } = useSafeAreaInsets();\r\n *   const theme = useTheme();\r\n *\r\n *   return (\r\n *     <Appbar\r\n *       style={[\r\n *         styles.bottom,\r\n *         {\r\n *           height: BOTTOM_APPBAR_HEIGHT + bottom,\r\n *           backgroundColor: theme.colors.elevation.level2,\r\n *         },\r\n *       ]}\r\n *       safeAreaInsets={{ bottom }}\r\n *     >\r\n *       <Appbar.Action icon=\"archive\" onPress={() => {}} />\r\n *       <Appbar.Action icon=\"email\" onPress={() => {}} />\r\n *       <Appbar.Action icon=\"label\" onPress={() => {}} />\r\n *       <Appbar.Action icon=\"delete\" onPress={() => {}} />\r\n *       <FAB\r\n *         mode=\"flat\"\r\n *         size=\"medium\"\r\n *         icon=\"plus\"\r\n *         onPress={() => {}}\r\n *         style={[\r\n *           styles.fab,\r\n *           { top: (BOTTOM_APPBAR_HEIGHT - MEDIUM_FAB_HEIGHT) / 2 },\r\n *         ]}\r\n *       />\r\n *     </Appbar>\r\n *   );\r\n * };\r\n *\r\n * const styles = StyleSheet.create({\r\n *   bottom: {\r\n *     backgroundColor: 'aquamarine',\r\n *     position: 'absolute',\r\n *     left: 0,\r\n *     right: 0,\r\n *     bottom: 0,\r\n *   },\r\n *   fab: {\r\n *     position: 'absolute',\r\n *     right: 16,\r\n *   },\r\n * });\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Appbar = ({\r\n  children,\r\n  dark,\r\n  style,\r\n  mode = 'small',\r\n  elevated,\r\n  safeAreaInsets,\r\n  theme: themeOverrides,\r\n  ...rest\r\n}: Props) => {\r\n  const theme = useInternalTheme(themeOverrides);\r\n  const { isV3 } = theme;\r\n  const flattenedStyle = StyleSheet.flatten(style);\r\n  const {\r\n    backgroundColor: customBackground,\r\n    elevation = isV3 ? (elevated ? 2 : 0) : 4,\r\n    ...restStyle\r\n  } = (flattenedStyle || {}) as Exclude<typeof flattenedStyle, number> & {\r\n    elevation?: number;\r\n    backgroundColor?: ColorValue;\r\n  };\r\n\r\n  const backgroundColor = getAppbarBackgroundColor(\r\n    theme,\r\n    elevation,\r\n    customBackground,\r\n    elevated\r\n  );\r\n\r\n  const isMode = (modeToCompare: AppbarModes) => {\r\n    return isV3 && mode === modeToCompare;\r\n  };\r\n\r\n  let isDark = false;\r\n\r\n  if (typeof dark === 'boolean') {\r\n    isDark = dark;\r\n  } else if (!isV3) {\r\n    isDark =\r\n      backgroundColor === 'transparent'\r\n        ? false\r\n        : typeof backgroundColor === 'string'\r\n        ? !color(backgroundColor).isLight()\r\n        : true;\r\n  }\r\n\r\n  const isV3CenterAlignedMode = isV3 && isMode('center-aligned');\r\n\r\n  let shouldCenterContent = false;\r\n  let shouldAddLeftSpacing = false;\r\n  let shouldAddRightSpacing = false;\r\n  if ((!isV3 && Platform.OS === 'ios') || isV3CenterAlignedMode) {\r\n    let hasAppbarContent = false;\r\n    let leftItemsCount = 0;\r\n    let rightItemsCount = 0;\r\n\r\n    React.Children.forEach(children, (child) => {\r\n      if (React.isValidElement(child)) {\r\n        if (child.type === AppbarContent) {\r\n          hasAppbarContent = true;\r\n        } else if (hasAppbarContent) {\r\n          rightItemsCount++;\r\n        } else {\r\n          leftItemsCount++;\r\n        }\r\n      }\r\n    });\r\n\r\n    shouldCenterContent =\r\n      hasAppbarContent &&\r\n      leftItemsCount < 2 &&\r\n      rightItemsCount < (isV3 ? 3 : 2);\r\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\r\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\r\n  }\r\n\r\n  const filterAppbarActions = React.useCallback(\r\n    (isLeading = false) =>\r\n      React.Children.toArray(children).filter((child) =>\r\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\r\n        isLeading ? child.props.isLeading : !child.props.isLeading\r\n      ),\r\n    [children]\r\n  );\r\n\r\n  const spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\r\n\r\n  const insets = {\r\n    paddingBottom: safeAreaInsets?.bottom,\r\n    paddingTop: safeAreaInsets?.top,\r\n    paddingLeft: safeAreaInsets?.left,\r\n    paddingRight: safeAreaInsets?.right,\r\n  };\r\n\r\n  return (\r\n    <Surface\r\n      style={[\r\n        { backgroundColor },\r\n        styles.appbar,\r\n        {\r\n          height: isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT,\r\n        },\r\n        insets,\r\n        restStyle,\r\n        !theme.isV3 && { elevation },\r\n      ]}\r\n      elevation={elevation as MD3Elevation}\r\n      {...rest}\r\n    >\r\n      {shouldAddLeftSpacing ? <View style={spacingStyle} /> : null}\r\n      {(!isV3 || isMode('small') || isMode('center-aligned')) &&\r\n        renderAppbarContent({\r\n          children,\r\n          isDark,\r\n          theme,\r\n          isV3,\r\n          shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent,\r\n        })}\r\n      {(isMode('medium') || isMode('large')) && (\r\n        <View\r\n          style={[\r\n            styles.columnContainer,\r\n            isMode('center-aligned') && styles.centerAlignedContainer,\r\n          ]}\r\n        >\r\n          {/* Appbar top row with controls */}\r\n          <View style={styles.controlsRow}>\r\n            {/* Left side of row container, can contain AppbarBackAction or AppbarAction if it's leading icon  */}\r\n            {renderAppbarContent({\r\n              children,\r\n              isDark,\r\n              isV3,\r\n              renderOnly: ['Appbar.BackAction'],\r\n              mode,\r\n            })}\r\n            {renderAppbarContent({\r\n              children: filterAppbarActions(true),\r\n              isDark,\r\n              isV3,\r\n              renderOnly: ['Appbar.Action'],\r\n              mode,\r\n            })}\r\n            {/* Right side of row container, can contain other AppbarAction if they are not leading icons */}\r\n            <View style={styles.rightActionControls}>\r\n              {renderAppbarContent({\r\n                children: filterAppbarActions(false),\r\n                isDark,\r\n                isV3,\r\n                renderExcept: [\r\n                  'Appbar',\r\n                  'Appbar.BackAction',\r\n                  'Appbar.Content',\r\n                  'Appbar.Header',\r\n                ],\r\n                mode,\r\n              })}\r\n            </View>\r\n          </View>\r\n          {/* Middle of the row, can contain only AppbarContent */}\r\n          {renderAppbarContent({\r\n            children,\r\n            isDark,\r\n            isV3,\r\n            renderOnly: ['Appbar.Content'],\r\n            mode,\r\n          })}\r\n        </View>\r\n      )}\r\n      {shouldAddRightSpacing ? <View style={spacingStyle} /> : null}\r\n    </Surface>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  appbar: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingHorizontal: 4,\r\n  },\r\n  spacing: {\r\n    width: 48,\r\n  },\r\n  v3Spacing: {\r\n    width: 52,\r\n  },\r\n  controlsRow: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n  rightActionControls: {\r\n    flexDirection: 'row',\r\n    flex: 1,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  columnContainer: {\r\n    flexDirection: 'column',\r\n    flex: 1,\r\n    paddingTop: 8,\r\n  },\r\n  centerAlignedContainer: {\r\n    paddingTop: 0,\r\n  },\r\n});\r\n\r\nexport default Appbar;\r\n\r\n// @component-docs ignore-next-line\r\nexport { Appbar };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}