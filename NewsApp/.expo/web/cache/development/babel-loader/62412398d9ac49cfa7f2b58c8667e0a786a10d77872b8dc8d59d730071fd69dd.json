{"ast":null,"code":"import * as React from 'react';\nexport var ToggleButtonGroupContext = React.createContext(null);\nvar ToggleButtonGroup = function ToggleButtonGroup(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    children = _ref.children;\n  return React.createElement(ToggleButtonGroupContext.Provider, {\n    value: {\n      value: value,\n      onValueChange: onValueChange\n    }\n  }, children);\n};\nToggleButtonGroup.displayName = 'ToggleButton.Group';\nexport default ToggleButtonGroup;\nexport { ToggleButtonGroup };","map":{"version":3,"names":["React","ToggleButtonGroupContext","createContext","ToggleButtonGroup","_ref","value","onValueChange","children","createElement","Provider","displayName"],"sources":["E:\\Mobile-Application-Development\\NewsApp\\node_modules\\react-native-paper\\src\\components\\ToggleButton\\ToggleButtonGroup.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nexport type Props<Value = string> = {\r\n  /**\r\n   * Function to execute on selection change.\r\n   */\r\n  onValueChange: (value: Value) => void;\r\n  /**\r\n   * Value of the currently selected toggle button.\r\n   */\r\n  value: Value | null;\r\n  /**\r\n   * React elements containing toggle buttons.\r\n   */\r\n  children: React.ReactNode;\r\n};\r\n\r\ntype ToggleButtonContextType<Value> = {\r\n  value: Value | null;\r\n  onValueChange: (item: Value) => void;\r\n};\r\n\r\nexport const ToggleButtonGroupContext =\r\n  //@ts-expect-error: TS can't ensure the type from Group to children\r\n  React.createContext<ToggleButtonContextType>(null as any);\r\n\r\n/**\r\n * Toggle group allows to control a group of toggle buttons.</br>\r\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, check out [ToggleButton.Row](ToggleButtonRow).\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { ToggleButton } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [value, setValue] = React.useState('left');\r\n *\r\n *   return (\r\n *     <ToggleButton.Group\r\n *       onValueChange={value => setValue(value)}\r\n *       value={value}>\r\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\r\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\r\n *     </ToggleButton.Group>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n *```\r\n */\r\nconst ToggleButtonGroup = <Value = string,>({\r\n  value,\r\n  onValueChange,\r\n  children,\r\n}: Props<Value>) => (\r\n  <ToggleButtonGroupContext.Provider\r\n    value={{\r\n      value,\r\n      onValueChange,\r\n    }}\r\n  >\r\n    {children}\r\n  </ToggleButtonGroupContext.Provider>\r\n);\r\n\r\nToggleButtonGroup.displayName = 'ToggleButton.Group';\r\n\r\nexport default ToggleButtonGroup;\r\n\r\n// @component-docs ignore-next-line\r\nexport { ToggleButtonGroup };\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAsB9B,OAAO,IAAMC,wBAAwB,GAEnCD,KAAK,CAACE,aAAa,CAA0B,IAAW,CAAC;AA2B3D,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAGC,IAAA;EAAA,IACxBC,KAAK,GAGQD,IAAA,CAHbC,KAAK;IACLC,aAAa,GAEAF,IAAA,CAFbE,aAAa;IACbC,QAAA,GACaH,IAAA,CADbG,QAAA;EACa,OACbP,KAAA,CAAAQ,aAAA,CAACP,wBAAwB,CAACQ,QAAQ;IAChCJ,KAAK,EAAE;MACLA,KAAK,EAALA,KAAK;MACLC,aAAA,EAAAA;IACF;EAAE,GAEDC,QACgC,CAAC;AAAA,CACrC;AAEDJ,iBAAiB,CAACO,WAAW,GAAG,oBAAoB;AAEpD,eAAeP,iBAAiB;AAGhC,SAASA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}