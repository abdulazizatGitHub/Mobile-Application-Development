{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RadioButton from \"./RadioButton\";\nimport RadioButtonAndroid from \"./RadioButtonAndroid\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport RadioButtonIOS from \"./RadioButtonIOS\";\nimport { handlePress, isChecked } from \"./utils\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nvar RadioButtonItem = function RadioButtonItem(_ref) {\n  var value = _ref.value,\n    label = _ref.label,\n    style = _ref.style,\n    labelStyle = _ref.labelStyle,\n    _onPress = _ref.onPress,\n    disabled = _ref.disabled,\n    color = _ref.color,\n    uncheckedColor = _ref.uncheckedColor,\n    rippleColor = _ref.rippleColor,\n    status = _ref.status,\n    themeOverrides = _ref.theme,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    _ref$labelVariant = _ref.labelVariant,\n    labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,\n    labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier;\n  var theme = useInternalTheme(themeOverrides);\n  var radioButtonProps = {\n    value: value,\n    disabled: disabled,\n    status: status,\n    color: color,\n    theme: theme,\n    uncheckedColor: uncheckedColor\n  };\n  var isLeading = position === 'leading';\n  var radioButton;\n  if (mode === 'android') {\n    radioButton = React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = React.createElement(RadioButton, radioButtonProps);\n  }\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(TouchableRipple, {\n      onPress: function onPress(event) {\n        return handlePress({\n          onPress: _onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value,\n          event: event\n        });\n      },\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        checked: checked,\n        disabled: disabled\n      },\n      testID: testID,\n      disabled: disabled,\n      theme: theme,\n      rippleColor: rippleColor\n    }, React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, React.createElement(Text, {\n      variant: labelVariant,\n      style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle],\n      maxFontSizeMultiplier: labelMaxFontSizeMultiplier\n    }, label), !isLeading && radioButton));\n  });\n};\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default RadioButtonItem;\nexport { RadioButtonItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","RadioButton","RadioButtonAndroid","RadioButtonContext","RadioButtonIOS","handlePress","isChecked","useInternalTheme","TouchableRipple","Text","RadioButtonItem","_ref","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","rippleColor","status","themeOverrides","theme","_ref$accessibilityLab","accessibilityLabel","testID","mode","_ref$position","position","_ref$labelVariant","labelVariant","labelMaxFontSizeMultiplier","radioButtonProps","isLeading","radioButton","createElement","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","Consumer","context","checked","contextValue","event","onValueChange","accessibilityRole","accessibilityState","styles","container","pointerEvents","variant","font","maxFontSizeMultiplier","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["E:\\Mobile-Application-Development\\NewsApp\\node_modules\\react-native-paper\\src\\components\\RadioButton\\RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ColorValue,\r\n  GestureResponderEvent,\r\n  StyleProp,\r\n  StyleSheet,\r\n  TextStyle,\r\n  View,\r\n  ViewStyle,\r\n} from 'react-native';\r\n\r\nimport RadioButton from './RadioButton';\r\nimport RadioButtonAndroid from './RadioButtonAndroid';\r\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\r\nimport RadioButtonIOS from './RadioButtonIOS';\r\nimport { handlePress, isChecked } from './utils';\r\nimport { useInternalTheme } from '../../core/theming';\r\nimport type { ThemeProp, MD3TypescaleKey } from '../../types';\r\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\r\nimport Text from '../Typography/Text';\r\n\r\nexport type Props = {\r\n  /**\r\n   * Value of the radio button.\r\n   */\r\n  value: string;\r\n  /**\r\n   * Label to be displayed on the item.\r\n   */\r\n  label: string;\r\n  /**\r\n   * Whether radio is disabled.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: (e: GestureResponderEvent) => void;\r\n  /**\r\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\r\n   */\r\n  accessibilityLabel?: string;\r\n  /**\r\n   * Custom color for unchecked radio.\r\n   */\r\n  uncheckedColor?: string;\r\n  /**\r\n   * Custom color for radio.\r\n   */\r\n  color?: string;\r\n  /**\r\n   * Color of the ripple effect.\r\n   */\r\n  rippleColor?: ColorValue;\r\n  /**\r\n   * Status of radio button.\r\n   */\r\n  status?: 'checked' | 'unchecked';\r\n  /**\r\n   * Additional styles for container View.\r\n   */\r\n  style?: StyleProp<ViewStyle>;\r\n  /**\r\n   * Style that is passed to Label element.\r\n   */\r\n  labelStyle?: StyleProp<TextStyle>;\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   *\r\n   * Label text variant defines appropriate text styles for type role and its size.\r\n   * Available variants:\r\n   *\r\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\r\n   *\r\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\r\n   *\r\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\r\n   *\r\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\r\n   *\r\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\r\n   */\r\n  labelVariant?: keyof typeof MD3TypescaleKey;\r\n  /**\r\n   * Specifies the largest possible scale a label font can reach.\r\n   */\r\n  labelMaxFontSizeMultiplier?: number;\r\n  /**\r\n   * @optional\r\n   */\r\n  theme?: ThemeProp;\r\n  /**\r\n   * testID to be used on tests.\r\n   */\r\n  testID?: string;\r\n  /**\r\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\r\n   * Left undefined `<RadioButton />` will be used.\r\n   */\r\n  mode?: 'android' | 'ios';\r\n  /**\r\n   * Radio button control position.\r\n   */\r\n  position?: 'leading' | 'trailing';\r\n};\r\n\r\n/**\r\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { RadioButton } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [value, setValue] = React.useState('first');\r\n *\r\n *   return (\r\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\r\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\r\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\r\n *     </RadioButton.Group>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n *```\r\n */\r\nconst RadioButtonItem = ({\r\n  value,\r\n  label,\r\n  style,\r\n  labelStyle,\r\n  onPress,\r\n  disabled,\r\n  color,\r\n  uncheckedColor,\r\n  rippleColor,\r\n  status,\r\n  theme: themeOverrides,\r\n  accessibilityLabel = label,\r\n  testID,\r\n  mode,\r\n  position = 'trailing',\r\n  labelVariant = 'bodyLarge',\r\n  labelMaxFontSizeMultiplier,\r\n}: Props) => {\r\n  const theme = useInternalTheme(themeOverrides);\r\n  const radioButtonProps = {\r\n    value,\r\n    disabled,\r\n    status,\r\n    color,\r\n    theme,\r\n    uncheckedColor,\r\n  };\r\n  const isLeading = position === 'leading';\r\n  let radioButton: any;\r\n\r\n  if (mode === 'android') {\r\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\r\n  } else if (mode === 'ios') {\r\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\r\n  } else {\r\n    radioButton = <RadioButton {...radioButtonProps} />;\r\n  }\r\n\r\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\r\n  const disabledTextColor = theme.isV3\r\n    ? theme.colors.onSurfaceDisabled\r\n    : theme.colors.disabled;\r\n  const textAlign = isLeading ? 'right' : 'left';\r\n\r\n  const computedStyle = {\r\n    color: disabled ? disabledTextColor : textColor,\r\n    textAlign,\r\n  } as TextStyle;\r\n\r\n  return (\r\n    <RadioButtonContext.Consumer>\r\n      {(context?: RadioButtonContextType) => {\r\n        const checked =\r\n          isChecked({\r\n            contextValue: context?.value,\r\n            status,\r\n            value,\r\n          }) === 'checked';\r\n        return (\r\n          <TouchableRipple\r\n            onPress={(event) =>\r\n              handlePress({\r\n                onPress: onPress,\r\n                onValueChange: context?.onValueChange,\r\n                value,\r\n                event,\r\n              })\r\n            }\r\n            accessibilityLabel={accessibilityLabel}\r\n            accessibilityRole=\"radio\"\r\n            accessibilityState={{\r\n              checked,\r\n              disabled,\r\n            }}\r\n            testID={testID}\r\n            disabled={disabled}\r\n            theme={theme}\r\n            rippleColor={rippleColor}\r\n          >\r\n            <View style={[styles.container, style]} pointerEvents=\"none\">\r\n              {isLeading && radioButton}\r\n              <Text\r\n                variant={labelVariant}\r\n                style={[\r\n                  styles.label,\r\n                  !theme.isV3 && styles.font,\r\n                  computedStyle,\r\n                  labelStyle,\r\n                ]}\r\n                maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\r\n              >\r\n                {label}\r\n              </Text>\r\n              {!isLeading && radioButton}\r\n            </View>\r\n          </TouchableRipple>\r\n        );\r\n      }}\r\n    </RadioButtonContext.Consumer>\r\n  );\r\n};\r\n\r\nRadioButtonItem.displayName = 'RadioButton.Item';\r\n\r\nexport default RadioButtonItem;\r\n\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonItem };\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 16,\r\n  },\r\n  label: {\r\n    flexShrink: 1,\r\n    flexGrow: 1,\r\n  },\r\n  font: {\r\n    fontSize: 16,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}