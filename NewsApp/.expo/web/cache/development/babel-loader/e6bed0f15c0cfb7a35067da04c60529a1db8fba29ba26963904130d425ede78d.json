{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\", \"rippleColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport { getToggleButtonColor } from \"./utils\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/themes/v2/colors\";\nimport { forwardRef } from \"../../utils/forwardRef\";\nimport IconButton from \"../IconButton/IconButton\";\nvar ToggleButton = forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n    size = _ref.size,\n    themeOverrides = _ref.theme,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    value = _ref.value,\n    status = _ref.status,\n    _onPress = _ref.onPress,\n    rippleColor = _ref.rippleColor,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var borderRadius = theme.roundness;\n  return React.createElement(ToggleButtonGroupContext.Consumer, null, function (context) {\n    var checked = context && context.value === value || status === 'checked';\n    var backgroundColor = getToggleButtonColor({\n      theme: theme,\n      checked: checked\n    });\n    var borderColor = theme.isV3 ? theme.colors.outline : color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    return React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: borderColor\n      }, style],\n      ref: ref,\n      theme: theme,\n      rippleColor: rippleColor\n    }, rest));\n  });\n});\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default ToggleButton;\nexport { ToggleButton };","map":{"version":3,"names":["React","StyleSheet","color","ToggleButtonGroupContext","getToggleButtonColor","useInternalTheme","black","white","forwardRef","IconButton","ToggleButton","_ref","ref","icon","size","themeOverrides","theme","accessibilityLabel","disabled","style","value","status","onPress","rippleColor","rest","_objectWithoutProperties","_excluded","borderRadius","roundness","createElement","Consumer","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","_extends","borderless","e","onValueChange","accessibilityState","selected","styles","content","create","width","height","margin"],"sources":["E:\\Mobile-Application-Development\\NewsApp\\node_modules\\react-native-paper\\src\\components\\ToggleButton\\ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  GestureResponderEvent,\r\n  StyleProp,\r\n  StyleSheet,\r\n  ViewStyle,\r\n  View,\r\n  Animated,\r\n  ColorValue,\r\n} from 'react-native';\r\n\r\nimport color from 'color';\r\n\r\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\r\nimport { getToggleButtonColor } from './utils';\r\nimport { useInternalTheme } from '../../core/theming';\r\nimport { black, white } from '../../styles/themes/v2/colors';\r\nimport type { ThemeProp } from '../../types';\r\nimport { forwardRef } from '../../utils/forwardRef';\r\nimport type { IconSource } from '../Icon';\r\nimport IconButton from '../IconButton/IconButton';\r\n\r\nexport type Props = {\r\n  /**\r\n   * Icon to display for the `ToggleButton`.\r\n   */\r\n  icon: IconSource;\r\n  /**\r\n   * Size of the icon.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * Custom text color for button.\r\n   */\r\n  iconColor?: string;\r\n  /**\r\n   * Color of the ripple effect.\r\n   */\r\n  rippleColor?: ColorValue;\r\n  /**\r\n   * Whether the button is disabled.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\r\n   */\r\n  accessibilityLabel?: string;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: (value?: GestureResponderEvent | string) => void;\r\n  /**\r\n   * Value of button.\r\n   */\r\n  value?: string;\r\n  /**\r\n   * Status of button.\r\n   */\r\n  status?: 'checked' | 'unchecked';\r\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  /**\r\n   * @optional\r\n   */\r\n  theme?: ThemeProp;\r\n  ref?: React.RefObject<View>;\r\n  /**\r\n   * testID to be used on tests.\r\n   */\r\n  testID?: string;\r\n};\r\n\r\n/**\r\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\r\n * a group should share a common container.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { ToggleButton } from 'react-native-paper';\r\n *\r\n * const ToggleButtonExample = () => {\r\n *   const [status, setStatus] = React.useState('checked');\r\n *\r\n *   const onButtonToggle = value => {\r\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\r\n *   };\r\n *\r\n *   return (\r\n *     <ToggleButton\r\n *       icon=\"bluetooth\"\r\n *       value=\"bluetooth\"\r\n *       status={status}\r\n *       onPress={onButtonToggle}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default ToggleButtonExample;\r\n *\r\n * ```\r\n */\r\nconst ToggleButton = forwardRef<View, Props>(\r\n  (\r\n    {\r\n      icon,\r\n      size,\r\n      theme: themeOverrides,\r\n      accessibilityLabel,\r\n      disabled,\r\n      style,\r\n      value,\r\n      status,\r\n      onPress,\r\n      rippleColor,\r\n      ...rest\r\n    }: Props,\r\n    ref\r\n  ) => {\r\n    const theme = useInternalTheme(themeOverrides);\r\n    const borderRadius = theme.roundness;\r\n\r\n    return (\r\n      <ToggleButtonGroupContext.Consumer>\r\n        {(\r\n          context: { value: string | null; onValueChange: Function } | null\r\n        ) => {\r\n          const checked: boolean | null =\r\n            (context && context.value === value) || status === 'checked';\r\n\r\n          const backgroundColor = getToggleButtonColor({ theme, checked });\r\n          const borderColor = theme.isV3\r\n            ? theme.colors.outline\r\n            : color(theme.dark ? white : black)\r\n                .alpha(0.29)\r\n                .rgb()\r\n                .string();\r\n\r\n          return (\r\n            <IconButton\r\n              borderless={false}\r\n              icon={icon}\r\n              onPress={(e?: GestureResponderEvent | string) => {\r\n                if (onPress) {\r\n                  onPress(e);\r\n                }\r\n\r\n                if (context) {\r\n                  context.onValueChange(!checked ? value : null);\r\n                }\r\n              }}\r\n              size={size}\r\n              accessibilityLabel={accessibilityLabel}\r\n              accessibilityState={{ disabled, selected: checked }}\r\n              disabled={disabled}\r\n              style={[\r\n                styles.content,\r\n                {\r\n                  backgroundColor,\r\n                  borderRadius,\r\n                  borderColor,\r\n                },\r\n                style,\r\n              ]}\r\n              ref={ref}\r\n              theme={theme}\r\n              rippleColor={rippleColor}\r\n              {...rest}\r\n            />\r\n          );\r\n        }}\r\n      </ToggleButtonGroupContext.Consumer>\r\n    );\r\n  }\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n  content: {\r\n    width: 42,\r\n    height: 42,\r\n    margin: 0,\r\n  },\r\n});\r\n\r\nexport default ToggleButton;\r\n\r\n// @component-docs ignore-next-line\r\nexport { ToggleButton };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}