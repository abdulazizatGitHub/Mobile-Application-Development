{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\", \"isLeading\", \"theme\", \"rippleColor\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport color from 'color';\nimport { useInternalTheme } from \"../../core/theming\";\nimport { black } from \"../../styles/themes/v2/colors\";\nimport { forwardRef } from \"../../utils/forwardRef\";\nimport IconButton from \"../IconButton/IconButton\";\nvar AppbarAction = forwardRef(function (_ref, ref) {\n  var _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 24 : _ref$size,\n    iconColor = _ref.color,\n    icon = _ref.icon,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    accessibilityLabel = _ref.accessibilityLabel,\n    isLeading = _ref.isLeading,\n    themeOverrides = _ref.theme,\n    rippleColor = _ref.rippleColor,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var actionIconColor = iconColor ? iconColor : theme.isV3 ? isLeading ? theme.colors.onSurface : theme.colors.onSurfaceVariant : color(black).alpha(0.54).rgb().string();\n  return React.createElement(IconButton, _extends({\n    size: size,\n    onPress: onPress,\n    iconColor: actionIconColor,\n    icon: icon,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    animated: true,\n    ref: ref,\n    rippleColor: rippleColor\n  }, rest));\n});\nAppbarAction.displayName = 'Appbar.Action';\nexport default AppbarAction;\nexport { AppbarAction };","map":{"version":3,"names":["React","color","useInternalTheme","black","forwardRef","IconButton","AppbarAction","_ref","ref","_ref$size","size","iconColor","icon","disabled","onPress","accessibilityLabel","isLeading","themeOverrides","theme","rippleColor","rest","_objectWithoutProperties","_excluded","actionIconColor","isV3","colors","onSurface","onSurfaceVariant","alpha","rgb","string","createElement","_extends","animated","displayName"],"sources":["C:\\Users\\w5677\\Mobile-Application-Development\\NewsApp\\node_modules\\react-native-paper\\src\\components\\Appbar\\AppbarAction.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport type {\r\n  StyleProp,\r\n  ViewStyle,\r\n  View,\r\n  Animated,\r\n  ColorValue,\r\n} from 'react-native';\r\n\r\nimport color from 'color';\r\nimport type { ThemeProp } from 'src/types';\r\n\r\nimport { useInternalTheme } from '../../core/theming';\r\nimport { black } from '../../styles/themes/v2/colors';\r\nimport { forwardRef } from '../../utils/forwardRef';\r\nimport type { IconSource } from '../Icon';\r\nimport IconButton from '../IconButton/IconButton';\r\n\r\nexport type Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\r\n  /**\r\n   *  Custom color for action icon.\r\n   */\r\n  color?: string;\r\n  /**\r\n   * Color of the ripple effect.\r\n   */\r\n  rippleColor?: ColorValue;\r\n  /**\r\n   * Name of the icon to show.\r\n   */\r\n  icon: IconSource;\r\n  /**\r\n   * Optional icon size.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n   */\r\n  accessibilityLabel?: string;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: () => void;\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   *\r\n   * Whether it's the leading button.\r\n   */\r\n  isLeading?: boolean;\r\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  ref?: React.RefObject<View>;\r\n  /**\r\n   * @optional\r\n   */\r\n  theme?: ThemeProp;\r\n};\r\n\r\n/**\r\n * A component used to display an action item in the appbar.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Appbar } from 'react-native-paper';\r\n * import { Platform } from 'react-native';\r\n *\r\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\r\n *\r\n * const MyComponent = () => (\r\n *     <Appbar.Header>\r\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\r\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\r\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\r\n *     </Appbar.Header>\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst AppbarAction = forwardRef<View, Props>(\r\n  (\r\n    {\r\n      size = 24,\r\n      color: iconColor,\r\n      icon,\r\n      disabled,\r\n      onPress,\r\n      accessibilityLabel,\r\n      isLeading,\r\n      theme: themeOverrides,\r\n      rippleColor,\r\n      ...rest\r\n    }: Props,\r\n    ref\r\n  ) => {\r\n    const theme = useInternalTheme(themeOverrides);\r\n\r\n    const actionIconColor = iconColor\r\n      ? iconColor\r\n      : theme.isV3\r\n      ? isLeading\r\n        ? theme.colors.onSurface\r\n        : theme.colors.onSurfaceVariant\r\n      : color(black).alpha(0.54).rgb().string();\r\n\r\n    return (\r\n      <IconButton\r\n        size={size}\r\n        onPress={onPress}\r\n        iconColor={actionIconColor}\r\n        icon={icon}\r\n        disabled={disabled}\r\n        accessibilityLabel={accessibilityLabel}\r\n        animated\r\n        ref={ref}\r\n        rippleColor={rippleColor}\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nAppbarAction.displayName = 'Appbar.Action';\r\n\r\nexport default AppbarAction;\r\n\r\n// @component-docs ignore-next-line\r\nexport { AppbarAction };\r\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAS9B,OAAOC,KAAK,MAAM,OAAO;AAGzB,SAASC,gBAAgB;AACzB,SAASC,KAAK;AACd,SAASC,UAAU;AAEnB,OAAOC,UAAU;AAmEjB,IAAMC,YAAY,GAAGF,UAAU,CAC7B,UAAAG,IAAA,EAaEC,GAAG,EACA;EAAA,IAAAC,SAAA,GAFKF,IAAA,CAVNG,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAG,EAAE,GAAAA,SAAA;IACFE,SAAS,GASVJ,IAAA,CATNN,KAAK;IACLW,IAAI,GAQEL,IAAA,CARNK,IAAI;IACJC,QAAQ,GAOFN,IAAA,CAPNM,QAAQ;IACRC,OAAO,GAMDP,IAAA,CANNO,OAAO;IACPC,kBAAkB,GAKZR,IAAA,CALNQ,kBAAkB;IAClBC,SAAS,GAIHT,IAAA,CAJNS,SAAS;IACFC,cAAc,GAGfV,IAAA,CAHNW,KAAK;IACLC,WAAW,GAELZ,IAAA,CAFNY,WAAW;IACRC,IAAA,GAAAC,wBAAA,CACGd,IAAA,EAAAe,SAAA;EAGR,IAAMJ,KAAK,GAAGhB,gBAAgB,CAACe,cAAc,CAAC;EAE9C,IAAMM,eAAe,GAAGZ,SAAS,GAC7BA,SAAS,GACTO,KAAK,CAACM,IAAI,GACVR,SAAS,GACPE,KAAK,CAACO,MAAM,CAACC,SAAS,GACtBR,KAAK,CAACO,MAAM,CAACE,gBAAgB,GAC/B1B,KAAK,CAACE,KAAK,CAAC,CAACyB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EAE3C,OACE9B,KAAA,CAAA+B,aAAA,CAAC1B,UAAU,EAAA2B,QAAA;IACTtB,IAAI,EAAEA,IAAK;IACXI,OAAO,EAAEA,OAAQ;IACjBH,SAAS,EAAEY,eAAgB;IAC3BX,IAAI,EAAEA,IAAK;IACXC,QAAQ,EAAEA,QAAS;IACnBE,kBAAkB,EAAEA,kBAAmB;IACvCkB,QAAQ;IACRzB,GAAG,EAAEA,GAAI;IACTW,WAAW,EAAEA;EAAY,GACrBC,IAAI,CACT,CAAC;AAEN,CACF,CAAC;AAEDd,YAAY,CAAC4B,WAAW,GAAG,eAAe;AAE1C,eAAe5B,YAAY;AAG3B,SAASA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}