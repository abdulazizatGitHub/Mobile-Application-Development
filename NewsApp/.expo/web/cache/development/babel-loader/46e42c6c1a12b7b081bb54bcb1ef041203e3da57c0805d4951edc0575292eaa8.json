{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToggleButton from \"./ToggleButton\";\nimport ToggleButtonGroup from \"./ToggleButtonGroup\";\nvar ToggleButtonRow = function ToggleButtonRow(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    children = _ref.children,\n    style = _ref.style;\n  var count = React.Children.count(children);\n  return React.createElement(ToggleButtonGroup, {\n    value: value,\n    onValueChange: onValueChange\n  }, React.createElement(View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, function (child, i) {\n    if (child && child.type === ToggleButton) {\n      return React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n      });\n    }\n    return child;\n  })));\n};\nToggleButtonRow.displayName = 'ToggleButton.Row';\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;\nexport { ToggleButtonRow };","map":{"version":3,"names":["React","StyleSheet","View","ToggleButton","ToggleButtonGroup","ToggleButtonRow","_ref","value","onValueChange","children","style","count","Children","createElement","styles","row","map","child","i","type","cloneElement","button","first","last","middle","props","displayName","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["E:\\Mobile-Application-Development\\NewsApp\\node_modules\\react-native-paper\\src\\components\\ToggleButton\\ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\r\n\r\nimport ToggleButton from './ToggleButton';\r\nimport ToggleButtonGroup from './ToggleButtonGroup';\r\n\r\nexport type Props = {\r\n  /**\r\n   * Function to execute on selection change.\r\n   */\r\n  onValueChange: (value: string) => void;\r\n  /**\r\n   * Value of the currently selected toggle button.\r\n   */\r\n  value: string;\r\n  /**\r\n   * React elements containing toggle buttons.\r\n   */\r\n  children: React.ReactNode;\r\n  style?: StyleProp<ViewStyle>;\r\n};\r\n\r\n/**\r\n * Toggle button row renders a group of toggle buttons in a row.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { ToggleButton } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [value, setValue] = React.useState('left');\r\n *\r\n *   return (\r\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\r\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\r\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\r\n *     </ToggleButton.Row>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n *\r\n *```\r\n */\r\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\r\n  const count = React.Children.count(children);\r\n\r\n  return (\r\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\r\n      <View style={[styles.row, style]}>\r\n        {React.Children.map(children, (child, i) => {\r\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\r\n          if (child && child.type === ToggleButton) {\r\n            // @ts-expect-error: We're sure that child is a React Element\r\n            return React.cloneElement(child, {\r\n              style: [\r\n                styles.button,\r\n                i === 0\r\n                  ? styles.first\r\n                  : i === count - 1\r\n                  ? styles.last\r\n                  : styles.middle,\r\n                // @ts-expect-error: We're sure that child is a React Element\r\n                child.props.style,\r\n              ],\r\n            });\r\n          }\r\n\r\n          return child;\r\n        })}\r\n      </View>\r\n    </ToggleButtonGroup>\r\n  );\r\n};\r\n\r\nToggleButtonRow.displayName = 'ToggleButton.Row';\r\n\r\nconst styles = StyleSheet.create({\r\n  row: {\r\n    flexDirection: 'row',\r\n  },\r\n  button: {\r\n    borderWidth: StyleSheet.hairlineWidth,\r\n  },\r\n\r\n  first: {\r\n    borderTopRightRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n  },\r\n\r\n  middle: {\r\n    borderRadius: 0,\r\n    borderLeftWidth: 0,\r\n  },\r\n\r\n  last: {\r\n    borderLeftWidth: 0,\r\n    borderTopLeftRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n  },\r\n});\r\n\r\nexport default ToggleButtonRow;\r\n\r\n// @component-docs ignore-next-line\r\nexport { ToggleButtonRow };\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAG9B,OAAOC,YAAY;AACnB,OAAOC,iBAAiB;AAyCxB,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAGC,IAAA,EAAsD;EAAA,IAAnDC,KAAK,GAAyCD,IAAA,CAA9CC,KAAK;IAAEC,aAAa,GAA0BF,IAAA,CAAvCE,aAAa;IAAEC,QAAQ,GAAgBH,IAAA,CAAxBG,QAAQ;IAAEC,KAAA,GAAcJ,IAAA,CAAdI,KAAA;EACzD,IAAMC,KAAK,GAAGX,KAAK,CAACY,QAAQ,CAACD,KAAK,CAACF,QAAQ,CAAC;EAE5C,OACET,KAAA,CAAAa,aAAA,CAACT,iBAAiB;IAACG,KAAK,EAAEA,KAAM;IAACC,aAAa,EAAEA;EAAc,GAC5DR,KAAA,CAAAa,aAAA,CAACX,IAAI;IAACQ,KAAK,EAAE,CAACI,MAAM,CAACC,GAAG,EAAEL,KAAK;EAAE,GAC9BV,KAAK,CAACY,QAAQ,CAACI,GAAG,CAACP,QAAQ,EAAE,UAACQ,KAAK,EAAEC,CAAC,EAAK;IAE1C,IAAID,KAAK,IAAIA,KAAK,CAACE,IAAI,KAAKhB,YAAY,EAAE;MAExC,OAAOH,KAAK,CAACoB,YAAY,CAACH,KAAK,EAAE;QAC/BP,KAAK,EAAE,CACLI,MAAM,CAACO,MAAM,EACbH,CAAC,KAAK,CAAC,GACHJ,MAAM,CAACQ,KAAK,GACZJ,CAAC,KAAKP,KAAK,GAAG,CAAC,GACfG,MAAM,CAACS,IAAI,GACXT,MAAM,CAACU,MAAM,EAEjBP,KAAK,CAACQ,KAAK,CAACf,KAAK;MAErB,CAAC,CAAC;IACJ;IAEA,OAAOO,KAAK;EACd,CAAC,CACG,CACW,CAAC;AAExB,CAAC;AAEDZ,eAAe,CAACqB,WAAW,GAAG,kBAAkB;AAEhD,IAAMZ,MAAM,GAAGb,UAAU,CAAC0B,MAAM,CAAC;EAC/BZ,GAAG,EAAE;IACHa,aAAa,EAAE;EACjB,CAAC;EACDP,MAAM,EAAE;IACNQ,WAAW,EAAE5B,UAAU,CAAC6B;EAC1B,CAAC;EAEDR,KAAK,EAAE;IACLS,oBAAoB,EAAE,CAAC;IACvBC,uBAAuB,EAAE;EAC3B,CAAC;EAEDR,MAAM,EAAE;IACNS,YAAY,EAAE,CAAC;IACfC,eAAe,EAAE;EACnB,CAAC;EAEDX,IAAI,EAAE;IACJW,eAAe,EAAE,CAAC;IAClBC,mBAAmB,EAAE,CAAC;IACtBC,sBAAsB,EAAE;EAC1B;AACF,CAAC,CAAC;AAEF,eAAe/B,eAAe;AAG9B,SAASA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}